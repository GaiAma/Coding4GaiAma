{{#if_eq type 'unified'}}
/// <reference types="mdast-util-to-string" />
import { Node } from 'unist'
import visit from 'unist-util-visit'
import toString from 'mdast-util-to-string'
{{/if_eq}}
export type Props = {}
{{#if_eq type 'unified'}}
export type NodeWithChildren = Node & {
  children?: Node[]
  value?: string
}

export const {{{camelCase name}}} = ({}: Props = {}): (ast: NodeWithChildren) => void {
  return function(ast: NodeWithChildren): void {
    visit(ast, 'link', (node: NodeWithChildren) => {
      const value = toString(node)
    })
  }
}
{{/else_eq}}
export const {{{camelCase name}}} = ({}: props): RETURNTYPE => {

}
{{/if_eq}}
