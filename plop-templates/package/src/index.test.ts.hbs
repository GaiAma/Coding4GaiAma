{{#if_eq type 'unified'}}/// <reference path="../types/unist-util-remove-position/index.d.ts" />{{/if_eq}}
import test, { ExecutionContext } from 'ava'
{{#if_eq type 'unified'}}
import remark from 'remark'
import u from 'unist-builder'
import removePosition from 'unist-util-remove-position'
{{/if_eq}}
import {{{camelCase name}}} from './index'

const clearTerminal = () => process.stdout.write('\x1B[2J\x1B[3J\x1B[H\x1Bc')

test.before((t: ExecutionContext) => {
  if (process.env.npm_config_argv.includes('watch')) {
    clearTerminal()
  }
})

{{#if_eq type 'unified'}}
const case1 = {
  input: `
| Column 1 | Column 2 |
| -------- | -------- |
| Row 1    | Row 1    |
`,
  expected: u('root', [
    u(
      'table',
      {
        align: [null, null],
        data: { hProperties: { headers: ['Column 1', 'Column 2'] } },
      },
      [
        u('tableRow', [
          u('tableCell', [{ type: 'text', value: 'Column 1' }]),
          u('tableCell', [{ type: 'text', value: 'Column 2' }]),
        ]),
        u('tableRow', [
          u('tableCell', [{ type: 'text', value: 'Row 1' }]),
          u('tableCell', [{ type: 'text', value: 'Row 1' }]),
        ]),
      ]
    ),
  ]),
}
{{/if_eq}}

test({{kebabCase name}}, (t: ExecutionContext) => {
{{#if_eq type 'unified'}}
  const actual = removePosition(
    remark()
      .use(plugin)
      .runSync(remark().parse(table1.input)),
    true
  ) as NodeWithHprops
  t.deepEqual(actual, table1.expected, 'message?')
{{/if_eq}}
})
